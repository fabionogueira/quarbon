export const attrs = {"QAccordion":{"file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QAccordion/index.tsx","component":"QAccordion","attrs":{"active":{"control":false,"name":"active","type":"string"},"activeClass":{"control":false,"name":"activeClass","type":"string"},"bordered":{"name":"bordered","type":"boolean"},"iconAlign":{"default":"right","control":{"type":"select","options":["left","right"]},"name":"iconAlign","type":"'left' | 'right'"},"toggle":{"name":"toggle","type":"boolean"},"onChange":{"type":"event","name":"onChange"}}},"QAccordionItem":{"file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QAccordion/index.tsx","component":"QAccordionItem","attrs":{"opened":{"name":"opened","type":"boolean"},"icon":{"name":"icon","type":"any"},"label":{"name":"label","type":"any"},"name":{"name":"name","type":"string"}}},"QBadge":{"file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QBadge/index.tsx","component":"QBadge","attrs":{"color":{"type":"string","description":"Change badge background color","default":"warning","control":{"type":"select","options":["primary","secondary","warning","positive","negative","info","accent"]},"name":"color"},"buzz":{"default":"true","name":"buzz","type":"boolean | number"},"label":{"control":{"value":"5"},"name":"label","type":"string | number"},"floating":{"default":true,"name":"floating","type":"boolean"},"transparent":{"name":"transparent","type":"boolean"},"outline":{"name":"outline","type":"boolean"},"rounded":{"default":true,"name":"rounded","type":"boolean"},"align":{"control":{"type":"select","options":["left","center","right"]},"name":"align","type":"'left' | 'center' | 'right'"},"verticalAlign":{"control":{"type":"select","options":["top","middle","bottom"]},"name":"verticalAlign","type":"'top' | 'middle' | 'bottom'"},"onMounted":{"type":"event","name":"onMounted"}}},"QButton":{"file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QButton/index.tsx","component":"QButton","attrs":{"color":{"description":"Change button background color","default":"primary","control":{"type":"select","options":["primary","secondary","warning","positive","negative","info","accent"]},"name":"color","type":"TColor"},"flat":{"name":"flat","type":"boolean"},"href":{"description":"Native `<a>` link href attribute; Has priority over the `to` and `replace` props","control":false,"name":"href","type":"string"},"icon":{"control":false,"name":"icon","type":"any"},"iconAlign":{"type":"string","control":false,"name":"iconAlign"},"label":{"description":"The text that will be shown on the button","control":{"value":"Button"},"name":"label","type":"string"},"loading":{"name":"loading","type":"boolean"},"outline":{"name":"outline","type":"boolean"},"onClick":{"type":"event","name":"onClick"},"progress":{"default":0,"name":"progress","type":"number"},"stretch":{"name":"stretch","type":"boolean"},"skeleton":{"name":"skeleton","type":"boolean"},"target":{"description":"Native `<a>` link target attribute; Use it only with `to` or `href` props","control":false,"name":"target","type":"string // Native <a> link target attribute; Use it only with 'to' or 'href' props"},"to":{"control":false,"name":"to","type":"string"},"type":{"type":"string","control":false,"name":"type"},"tooltip":{"name":"tooltip","type":"string","control":{"value":"Button tooltip"}},"disabled":{"name":"disabled","type":"boolean"}}},"QButtonGroup":{"file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QButtonGroup/index.tsx","component":"QButtonGroup","attrs":{"active":{"name":"active","type":"number"},"value":{"name":"value","type":"any"},"onChange":{"type":"event","name":"onChange"},"skeleton":{"name":"skeleton","type":"boolean"}}},"QCard":{"file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QCard/index.tsx","component":"QCard","attrs":{"bordered":{"name":"bordered","type":"boolean"},"skeleton":{"name":"skeleton","type":"boolean"}}},"QCardSection":{"file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QCard/index.tsx","component":"QCardSection","attrs":{"horizontal":{"name":"horizontal","type":"boolean"},"skeleton":{"name":"skeleton","type":"boolean"}}},"QCardActions":{"file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QCard/index.tsx","component":"QCardActions","attrs":{"bordered":{"name":"bordered","type":"boolean"},"skeleton":{"name":"skeleton","type":"boolean"}}},"QCheckbox":{"file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QCheckbox/index.tsx","component":"QCheckbox","attrs":{"checked":{"name":"checked","type":"boolean"},"checkedIcon":{"name":"checkedIcon","type":"any"},"iconAlign":{"control":{"type":"select","options":["left","right"]},"name":"iconAlign","type":"'left' | 'right'"},"iconSize":{"name":"iconSize","type":"number"},"label":{"control":{"value":"Checkbox label"},"name":"label","type":"any"},"name":{"control":false,"name":"name","type":"string"},"onChange":{"type":"event","name":"onChange"},"rules":{"control":false,"name":"rules","type":"any"},"skeleton":{"name":"skeleton","type":"boolean"},"uncheckedHide":{"name":"uncheckedHide","type":"boolean"},"uncheckedIcon":{"name":"uncheckedIcon","type":"any"},"undeterminedIcon":{"name":"undeterminedIcon","type":"any"}}},"QDrawer":{"file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QDrawer/index.tsx","component":"QDrawer","attrs":{"breakpoint":{"name":"breakpoint","type":"number"},"mini":{"name":"mini","type":"boolean"},"miniSize":{"name":"miniSize","type":"number"},"open":{"name":"open","type":"boolean"},"onOpen":{"type":"event","name":"onOpen"},"onClose":{"type":"event","name":"onClose"},"onChange":{"type":"event","name":"onChange"},"slide":{"type":"string","name":"slide"},"width":{"name":"width","type":"number"}},"description":"Puts drawer into overlay mode (does not occupy space on screen, narrowing the page)"},"QForm":{"file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QForm/index.tsx","component":"QForm","attrs":{"forceSubmit":{"name":"forceSubmit","type":"boolean"},"formData":{"name":"formData","type":"TFormData // & TInitialData & { $context"},"onChange":{"type":"event","name":"onChange"},"onSubmit":{"name":"onSubmit","type":"TFunctionSubmit"},"onReset":{"type":"event","name":"onReset"},"rules":{"name":"rules","type":"any"}}},"QInlineNotify":{"file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QInlineNotify/index.tsx","component":"QInlineNotify","attrs":{"title":{"control":{"value":"Title"},"name":"title","type":"string"},"subtitle":{"control":{"value":"Subtitle"},"name":"subtitle","type":"string"},"caption":{"control":{"value":"Caption"},"name":"caption","type":"string"},"kind":{"type":"string","control":{"type":"select","options":["error","info","success","warning"],"value":"success"},"name":"kind"},"icon":{"control":false,"name":"icon","type":"any"},"onCloseClick":{"type":"event","name":"onCloseClick"}}},"QList":{"file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QList/index.tsx","component":"QList","attrs":{"bordered":{"name":"bordered","type":"boolean"},"separator":{"name":"separator","type":"boolean"},"onClick":{"type":"event","name":"onClick"}}},"QListItem":{"file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QList/index.tsx","component":"QListItem","attrs":{"active":{"name":"active","type":"boolean"},"activeClass":{"name":"activeClass","type":"string"},"clickable":{"name":"clickable","type":"boolean"},"dark":{"name":"dark","type":"boolean"},"skeleton":{"name":"skeleton","type":"boolean"},"to":{"name":"to","type":"string"},"onClick":{"type":"event","name":"onClick"}}},"QListSection":{"file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QList/index.tsx","component":"QListSection","attrs":{"avatar":{"name":"avatar","type":"boolean"},"side":{"name":"side","type":"boolean"},"skeleton":{"name":"skeleton","type":"boolean"},"thumbnail":{"name":"thumbnail","type":"boolean"},"top":{"name":"top","type":"boolean"}}},"QListLabel":{"file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QList/index.tsx","component":"QListLabel","attrs":{"caption":{"name":"caption","type":"boolean"},"header":{"name":"header","type":"boolean"},"lines":{"name":"lines","type":"number | string"},"overline":{"name":"overline","type":"boolean"},"skeleton":{"name":"skeleton","type":"boolean"}}},"QLoading":{"file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QLoading/index.tsx","component":"QLoading","attrs":{"label":{"control":{"value":"loading"},"name":"label","type":"string"},"labelPosition":{"type":"string","default":"right","control":{"type":"select","options":["top","bottom","left","right"]},"name":"labelPosition"},"size":{"control":{"value":32},"name":"size","type":"number"},"color":{"type":"string","default":"secondary","control":{"type":"select","options":["primary","secondary","accent","positive","negative","info","warning"]},"name":"color"},"overlay":{"default":true,"name":"overlay","type":"boolean"},"inline":{"default":true,"name":"inline","type":"boolean"}}},"QMenu":{"file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QMenu/index.tsx","component":"QMenu","attrs":{"anchor":{"name":"anchor","type":"TAnchor"},"anchorRef":{"name":"anchorRef","type":"string | any"},"contextPosition":{"name":"contextPosition","type":"boolean"},"fitToHeight":{"name":"fitToHeight","type":"boolean"},"offsetLeft":{"name":"offsetLeft","type":"number"},"offsetRight":{"name":"offsetRight","type":"number"},"offsetTop":{"name":"offsetTop","type":"number"},"offsetBottom":{"name":"offsetBottom","type":"number"},"onClose":{"type":"event","name":"onClose"},"onOpen":{"type":"event","name":"onOpen"},"persistent":{"name":"persistent","type":"boolean"},"self":{"name":"self","type":"TAnchor"},"show":{"name":"show","type":"boolean"},"transition":{"name":"transition","type":"string"},"transitionShow":{"name":"transitionShow","type":"string"},"transitionHide":{"name":"transitionHide","type":"string"},"touchPosition":{"name":"touchPosition","type":"boolean"}}},"QProgress":{"file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QProgress/index.tsx","component":"QProgress","attrs":{"animationSpeed":{"name":"animationSpeed","type":"number"},"dark":{"name":"dark","type":"boolean"},"hint":{"control":{"value":"solving something"},"name":"hint","type":"string"},"indeterminate":{"name":"indeterminate","type":"boolean"},"label":{"type":"string","control":{"value":"completed"},"name":"label"},"labelInner":{"name":"labelInner","type":"string"},"min":{"name":"min","type":"number"},"max":{"name":"max","type":"number"},"reverse":{"name":"reverse","type":"boolean"},"rounded":{"name":"rounded","type":"boolean"},"size":{"control":{"type":"select","options":["xs","sm","md","lg","xl"]},"name":"size","type":"TSize | string"},"value":{"control":{"value":50},"name":"value","type":"number"},"showProgress":{"control":{"value":true},"name":"showProgress","type":"boolean"},"onChange":{"type":"event","name":"onChange"},"onChangeComplete":{"type":"event","name":"onChangeComplete"}}},"QRadio":{"file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QRadio/index.tsx","component":"QRadio","attrs":{"checked":{"name":"checked","type":"boolean"},"checkedIcon":{"control":false,"name":"checkedIcon","type":"any"},"iconAlign":{"type":"string","control":{"type":"select","options":["left","right"]},"name":"iconAlign"},"iconSize":{"name":"iconSize","type":"number"},"label":{"type":"string","control":{"value":"Component Label"},"name":"label"},"name":{"control":false,"name":"name","type":"string"},"onChange":{"type":"event","name":"onChange"},"rules":{"control":false,"name":"rules","type":"any"},"skeleton":{"name":"skeleton","type":"boolean"},"uncheckedIcon":{"control":false,"name":"uncheckedIcon","type":"any"},"value":{"type":"string","name":"value"}}},"QResizer":{"file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QResizer/index.tsx","component":"QResizer","attrs":{"orientation":{"control":{"type":"select","options":["horizontal","vertical"]},"name":"orientation","type":"'horizontal' | 'vertical'"},"target":{"control":false,"name":"target","type":"'before' | 'after'"},"min":{"name":"min","type":"number"},"max":{"name":"max","type":"number"},"onDrag":{"type":"event","name":"onDrag"},"onDragEnd":{"type":"event","name":"onDragEnd"}}},"QSelect":{"file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QSelect/index.tsx","component":"QSelect","attrs":{"bordered":{"name":"bordered","type":"boolean"},"error":{"name":"error","type":"string"},"label":{"name":"label","type":"string"},"name":{"control":false,"name":"name","type":"string"},"flat":{"name":"flat","type":"boolean"},"inline":{"name":"inline","type":"boolean"},"displayValue":{"type":"string","name":"displayValue"},"multiselect":{"name":"multiselect","type":"boolean"},"options":{"type":"any[]","control":false,"name":"options"},"optionValue":{"control":false,"name":"optionValue","type":"string"},"optionLabel":{"control":false,"name":"optionLabel","type":"string"},"onChange":{"type":"event","name":"onChange"},"emitChangeOnClose":{"control":false,"name":"emitChangeOnClose","type":"boolean"},"rules":{"control":false,"name":"rules","type":"any"},"skeleton":{"name":"skeleton","type":"boolean"},"value":{"control":false,"name":"value","type":"any"},"values":{"control":false,"name":"values","type":"any[]"},"slotOption":{"type":"callback","control":false,"name":"slotOption"}}},"QSelectItem":{"file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QSelect/index.tsx","component":"QSelectItem","attrs":{"value":{"name":"value","type":"string | number"},"label":{"name":"label","type":"string"}}},"QSlider":{"file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QSlider/index.tsx","component":"QSlider","attrs":{"after":{"control":false,"name":"after","type":"any"},"before":{"control":false,"name":"before","type":"any"},"label":{"type":"string","control":{"value":"Slider"},"name":"label"},"labelInner":{"name":"labelInner","type":"string"},"min":{"name":"min","type":"number"},"max":{"name":"max","type":"number"},"skeleton":{"name":"skeleton","type":"boolean"},"value":{"control":{"value":50},"name":"value","type":"number"},"onChange":{"type":"event","name":"onChange"},"onChanged":{"type":"event","name":"onChanged"}}},"QTable":{"file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QTable/index.tsx","component":"QTable","attrs":{"columns":{"control":false,"name":"columns","type":"Array<TTableCol>"},"clickable":{"name":"clickable","type":"boolean"},"cellRender":{"name":"cellRender","type":"(dimension"},"fixedRow":{"name":"fixedRow","type":"boolean"},"fixedCol":{"name":"fixedCol","type":"boolean"},"footer":{"name":"footer","type":"any"},"header":{"name":"header","type":"any"},"helperText":{"name":"helperText","type":"string"},"onClickRow":{"name":"onClickRow","type":"(row"},"onClickCell":{"name":"onClickCell","type":"(cell"},"rows":{"control":false,"name":"rows","type":"Array<Record<string, any>>"},"skeleton":{"name":"skeleton","type":"boolean"},"title":{"name":"title","type":"string"},"toolbar":{"name":"toolbar","type":"any"}}},"QTab":{"file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QTabs/QTab.tsx","component":"QTab","attrs":{"name":{"name":"name","type":"string"},"icon":{"control":false,"name":"icon","type":"any"},"label":{"name":"label","type":"string"},"to":{"control":false,"name":"to","type":"string"},"onClick":{"type":"event","name":"onClick"}}},"QTabs":{"file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QTabs/QTabs.tsx","component":"QTabs","attrs":{"vertical":{"name":"vertical","type":"boolean"},"align":{"type":"string","control":{"type":"select","options":["left","right","center","justify"]},"name":"align"},"activeClass":{"control":false,"description":"the css class that will be applied to the active tab","name":"activeClass","type":"string"},"active":{"control":false,"description":"current tab name","name":"active","type":"string"},"indicator":{"type":"string","control":{"type":"select","options":["top","bottom"]},"name":"indicator"},"fill":{"control":{"value":true},"name":"fill","type":"boolean"},"onChange":{"type":"event","name":"onChange"}}},"QTextbox":{"file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QTextbox/index.tsx","component":"QTextbox","attrs":{"autogrow":{"name":"autogrow","type":"boolean"},"autoFocus":{"control":false,"name":"autoFocus","type":"boolean"},"defaultValue":{"control":false,"name":"defaultValue","type":"string | number"},"mask":{"control":false,"name":"mask","type":"string"},"maxLength":{"name":"maxLength","type":"number"},"name":{"control":false,"name":"name","type":"string"},"prefix":{"name":"prefix","type":"string"},"placeholder":{"name":"placeholder","type":"string"},"readonly":{"name":"readonly","type":"boolean"},"rules":{"control":false,"name":"rules","type":"any"},"suffix":{"name":"suffix","type":"string"},"type":{"control":false,"name":"type","type":"TTypes"},"value":{"control":{"value":""},"name":"value","type":"string | number | null"},"helperText":{"name":"helperText","type":"string"},"error":{"name":"error","type":"string"},"onChange":{"type":"event","name":"onChange"},"onBlur":{"type":"event","name":"onBlur"},"onFocus":{"type":"event","name":"onFocus"},"after":{"control":false,"description":"após o input","name":"after","type":"any"},"append":{"control":false,"description":"no fim do input","name":"append","type":"any"},"before":{"control":false,"description":"antes do input","name":"before","type":"any"},"clearable":{"name":"clearable","type":"boolean"},"color":{"control":false,"name":"color","type":"string"},"dark":{"name":"dark","type":"boolean"},"filled":{"name":"filled","type":"boolean"},"label":{"name":"label","type":"string"},"loading":{"name":"loading","type":"boolean"},"outlined":{"name":"outlined","type":"boolean"},"standout":{"name":"standout","type":"boolean"},"prepend":{"control":false,"description":"no começo do input","name":"prepend","type":"any"}}},"QToggle":{"file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QToggle/index.tsx","component":"QToggle","attrs":{"checked":{"name":"checked","type":"boolean"},"onChange":{"type":"event","name":"onChange"},"name":{"control":false,"name":"name","type":"string"},"rules":{"control":false,"name":"rules","type":"any"},"skeleton":{"name":"skeleton","type":"boolean"}}},"QToolbar":{"file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QToolbar/index.tsx","component":"QToolbar","attrs":{"color":{"control":false,"name":"color","type":"string"},"dark":{"control":{"value":true},"name":"dark","type":"boolean"},"inset":{"name":"inset","type":"boolean"}}},"QToolbarTitle":{"file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QToolbar/index.tsx","component":"QToolbarTitle"},"QTree":{"file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QTree/index.tsx","component":"QTree","attrs":{"accordion":{"name":"accordion","type":"boolean"},"checked":{"name":"checked","type":"boolean"},"name":{"control":false,"name":"name","type":"string"},"nodes":{"control":false,"name":"nodes","type":"TNode[]"},"onChange":{"type":"event","name":"onChange"},"rules":{"control":false,"name":"rules","type":"any"},"selected":{"control":false,"name":"selected","type":"string"},"skeleton":{"name":"skeleton","type":"boolean"},"toggle":{"name":"toggle","type":"boolean"}}}}
export const codes = {"PluginsDialogBasicStore":{"id":"PluginsDialogBasicStore","source":"import { Dialog } from '@quarbon/plugins/Dialog'\n\nfunction PluginsDialogBasicStore() {\n  function showLoading() {\n    Dialog.loading.show()\n\n    setTimeout(() => {\n      Dialog.loading.hide()\n    }, 4000)\n  }\n\n  return (\n    <div className=\"docs-plugins__buttons\">\n      <QButton\n        color=\"primary\"\n        label=\"Alert\"\n        onClick={() => {\n          Dialog.alert('Alert')\n        }}\n      />\n      <QButton\n        color=\"warning\"\n        label=\"Confirm\"\n        onClick={() => {\n          Dialog.confirm('Confirm', (button: any) => {\n            if (button == 0) Dialog.notifyInfo('No')\n            if (button == 1) Dialog.notifyInfo('Yes')\n          })\n        }}\n      />\n      <QButton color=\"secondary\" label=\"Loading\" onClick={showLoading} />\n      <QButton\n        color=\"info\"\n        label=\"Notify (success)\"\n        onClick={() => {\n          Dialog.notifySuccess('success notification')\n        }}\n      />\n      <QButton\n        color=\"negative\"\n        label=\"Notify (error)\"\n        onClick={() => {\n          Dialog.notifyError('warning notification')\n        }}\n      />\n    </div>\n  )\n}\n","file":"/home/fabio/Dev/quarbon/packages/quarbon/src/plugins/Plugins.docs.tsx"},"PluginsDialogCustomContentsStore":{"id":"PluginsDialogCustomContentsStore","source":"import { Dialog } from '@quarbon/plugins/Dialog'\n\nfunction PluginsDialogCustomContentsStore() {\n  const closeRef = useRef<any>(() => undefined)\n\n  function Progress() {\n    const [progress, setProgress] = useState(0)\n\n    useEffect(() => {\n      if (progress < 100) {\n        setTimeout(() => setProgress(progress + 10), 300)\n      }\n    }, [progress])\n\n    function close() {\n      setTimeout(() => {\n        closeRef.current()\n        Dialog.notifyInfo('Process completed!')\n      }, 600)\n    }\n\n    return (\n      <QProgress\n        value={progress}\n        label={`${progress}%`}\n        onChangeComplete={(percent) => {\n          if (percent == 100) close()\n        }}\n      />\n    )\n  }\n\n  return (\n    <div className=\"docs-plugins__buttons\">\n      <QButton\n        color=\"primary\"\n        label=\"Radio options\"\n        onClick={() => {\n          Dialog.alert(\n            {\n              title: 'Options',\n              content: (\n                <>\n                  <QField>\n                    <QRadio name=\"options\" value=\"01\" label=\"Options 01\" onChange={(val: string) => (option = val)} />\n                  </QField>\n                  <QField>\n                    <QRadio name=\"options\" value=\"02\" label=\"Options 02\" onChange={(val: string) => (option = val)} />\n                  </QField>\n                  <QField>\n                    <QRadio name=\"options\" value=\"03\" label=\"Options 03\" onChange={(val: string) => (option = val)} />\n                  </QField>\n                </>\n              ),\n            },\n            () => Dialog.notifyInfo(`Option = [${option}]`),\n          )\n        }}\n      />\n      <QButton\n        color=\"primary\"\n        label=\"Show progress\"\n        onClick={() => {\n          closeRef.current = Dialog.alert({\n            title: null,\n            close: false,\n            button: false,\n            persistent: true,\n            content: <Progress />,\n          })\n        }}\n      />\n    </div>\n  )\n}\n","file":"/home/fabio/Dev/quarbon/packages/quarbon/src/plugins/Plugins.docs.tsx"},"AccordionCustomIconStore":{"id":"AccordionCustomIconStore","source":"import { CbLocationCurrent, CbPinFilled, CbPlayOutlineFilled } from '@quarbon/icons/cb'\n\nfunction AccordionCustomIconStore() {\n  return (\n    <QAccordion active=\"1\">\n      <QAccordionItem label=\"Title 1\" name=\"1\" icon={<CbPlayOutlineFilled />}>\n        {lorem2}\n      </QAccordionItem>\n      <QAccordionItem label=\"Disabled\" name=\"2\" icon={<CbLocationCurrent />} disabled>\n        {lorem3}\n      </QAccordionItem>\n      <QAccordionItem label=\"Title 3\" name=\"3\" icon={<CbPinFilled />}>\n        {lorem1}\n      </QAccordionItem>\n    </QAccordion>\n  )\n}\n","file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QAccordion/QAccordion.docs.tsx"},"AccordionCustomActiveItemStore":{"id":"AccordionCustomActiveItemStore","source":"function AccordionCustomActiveItemStore() {\n  /**\n   *  // css class definition\n   *  .custom-item {\n   *      color: red\n   *  }\n   */\n\n  return (\n    <QAccordion active=\"1\" activeClass=\"custom-item\">\n      <QAccordionItem label=\"Title 1\" name=\"1\">\n        {lorem2}\n      </QAccordionItem>\n      <QAccordionItem label=\"Title 2\" name=\"2\">\n        {lorem3}\n      </QAccordionItem>\n      <QAccordionItem label=\"Title 3\" name=\"3\">\n        {lorem1}\n      </QAccordionItem>\n    </QAccordion>\n  )\n}\n","file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QAccordion/QAccordion.docs.tsx"},"QBadgeStandard":{"id":"QBadgeStandard","source":"<QButton>\n  <span>My Button</span>\n  <QBadge label=\"2\" />\n</QButton>","file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QBadge/QBadge.docs.tsx"},"QButtonWithIconStory":{"id":"QButtonWithIconStory","source":"import { CbEmail, CbPhoneFilled, CbSend } from '@quarbon/icons/cb'\nimport { MdMarkEmailRead } from 'react-icons/all'\n\nfunction QButtonWithIconStory() {\n  return (\n    <>\n      <QButton label=\"On left\" icon={<MdMarkEmailRead size={16} />} color=\"primary\" />\n      <QButton label=\"On right\" icon={<MdMarkEmailRead size={16} />} color=\"secondary\" iconAlign=\"right\" />\n      <QButton style={{ background: '#FF0080', color: 'white' }}>\n        <i>\n          <CbEmail />\n        </i>\n        On left and right\n        <i>\n          <CbSend />\n        </i>\n      </QButton>\n      <QButton style={{ background: '#9c27b0', color: 'white' }}>\n        <div className=\"col align-center\">\n          <i style={{ marginLeft: 0 }}>\n            <CbPhoneFilled />\n          </i>\n          Stacked\n        </div>\n      </QButton>\n      <QButton color=\"info\">\n        <div className=\"col align-center\">\n          Stacked\n          <i style={{ marginLeft: 0 }}>\n            <CbPhoneFilled />\n          </i>\n        </div>\n      </QButton>\n    </>\n  )\n}\n","file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QButton/QButton.docs.tsx"},"QButtonOnlyIconStory":{"id":"QButtonOnlyIconStory","source":"import { CbEmail, CbPhoneFilled, CbSend } from '@quarbon/icons/cb'\nimport { MdMarkEmailRead } from 'react-icons/all'\n\nfunction QButtonOnlyIconStory() {\n  return (\n    <>\n      <QButton tooltip=\"teste\" icon={<CbEmail size={16} />} color=\"primary\" />\n      <QButton icon={<MdMarkEmailRead size={16} />} color=\"accent\" outline />\n      <QButton icon={<CbPhoneFilled size={16} />} color=\"secondary\" flat />\n    </>\n  )\n}\n","file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QButton/QButton.docs.tsx"},"QButtonStandardStory":{"id":"QButtonStandardStory","source":"function QButtonStandardStory() {\n  return (\n    <>\n      <QButton label=\"Primary\" color=\"primary\" />\n      <QButton label=\"Accent\" color=\"accent\" />\n      <QButton label=\"Secondary\" color=\"secondary\" />\n      <QButton label=\"Info\" color=\"info\" />\n      <QButton label=\"Negative\" color=\"negative\" />\n      <QButton label=\"Positive\" color=\"positive\" />\n      <QButton label=\"Warning\" color=\"warning\" />\n    </>\n  )\n}\n","file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QButton/QButton.docs.tsx"},"QButtonCustomColorsStory":{"id":"QButtonCustomColorsStory","source":"function QButtonCustomColorsStory() {\n  return (\n    <>\n      <QButton label=\"Fuchsia\" style={{ background: '#FF0080', color: 'white' }} />\n      <QButton flat style={{ color: '#FF0080' }} label=\"Fuchsia Flat\" />\n      <QButton outline style={{ color: 'goldenrod' }} label=\"Goldenrod\" />\n    </>\n  )\n}\n","file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QButton/QButton.docs.tsx"},"QButtonTruncateLabelStory":{"id":"QButtonTruncateLabelStory","source":"function QButtonTruncateLabelStory() {\n  return (\n    <>\n      <QButton color=\"primary\" style={{ width: 200 }}>\n        <div className=\"ellipsis\">This is some very long text that is expected to be truncated</div>\n      </QButton>\n    </>\n  )\n}\n","file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QButton/QButton.docs.tsx"},"QButtonLoadingStory":{"id":"QButtonLoadingStory","source":"function QButtonLoadingStory() {\n  const [loading, setLoading] = useState(false)\n\n  function simulate() {\n    setLoading(true)\n    setTimeout(() => setLoading(false), 4000)\n  }\n\n  return <QButton color=\"accent\" label=\"Loading button\" loading={loading} style={{ width: 150 }} onClick={simulate} />\n}\n","file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QButton/QButton.docs.tsx"},"QButtonProgressStory":{"id":"QButtonProgressStory","source":"function QButtonProgressStory() {\n  const [progress, setProgress] = useState(0)\n\n  useEffect(() => {\n    if (progress > 0 && progress < 100) {\n      let p = progress + Math.floor(Math.random() * 8 + 10)\n      if (p > 100) p = 100\n      setTimeout(() => setProgress(p), 700)\n    } else {\n      setTimeout(() => setProgress(0), 1000)\n    }\n  }, [progress])\n\n  function simulate() {\n    setProgress(1)\n  }\n\n  return (\n    <QButton\n      color=\"primary\"\n      label={`Progress [${progress}]`}\n      progress={progress}\n      style={{ width: 150 }}\n      onClick={simulate}\n    />\n  )\n}\n","file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QButton/QButton.docs.tsx"},"ButtonGroupOnlyIconStory":{"id":"ButtonGroupOnlyIconStory","source":"import { Cb4K, CbAccount, CbActivity } from '@quarbon/icons/cb'\n\nfunction ButtonGroupOnlyIconStory() {\n  return (\n    <QButtonGroup>\n      <QButton icon={<Cb4K />} flat />\n      <QButton icon={<CbAccount />} flat />\n      <QButton icon={<CbActivity />} flat />\n    </QButtonGroup>\n  )\n}\n","file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QButtonGroup/QButtonGroup.docs.tsx"},"ButtonGroupMixedStory":{"id":"ButtonGroupMixedStory","source":"import { Cb4K, CbAccount, CbActivity } from '@quarbon/icons/cb'\n\nfunction ButtonGroupMixedStory() {\n  return (\n    <QButtonGroup>\n      <QButton icon={<Cb4K />} label=\"button 01\" flat />\n      <QButton icon={<CbAccount />} flat />\n      <QButton icon={<CbActivity />} label=\"button 03\" iconAlign=\"right\" flat />\n    </QButtonGroup>\n  )\n}\n","file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QButtonGroup/QButtonGroup.docs.tsx"},"ButtonGroupBasicStory":{"id":"ButtonGroupBasicStory","source":"function ButtonGroupBasicStory() {\n  return (\n    <QButtonGroup>\n      <QButton label=\"button 01\" flat />\n      <QButton label=\"button 02\" flat />\n      <QButton label=\"button 03\" flat />\n    </QButtonGroup>\n  )\n}\n","file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QButtonGroup/QButtonGroup.docs.tsx"},"QCardBasicStory":{"id":"QCardBasicStory","source":"function QCardBasicStory() {\n  return (\n    <>\n      <QCard>\n        <QCardSection>{lorem1}</QCardSection>\n      </QCard>\n\n      <QCard\n        style={{\n          color: '#fff',\n          background: 'radial-gradient(circle, #b3b3b3 0%, #262626 100%)',\n        }}\n      >\n        <QCardSection>\n          <h6>Our Changing Planet</h6>\n          <div className=\"text-subtitle2\">by John Doe</div>\n        </QCardSection>\n        <QCardSection>{lorem2}</QCardSection>\n      </QCard>\n\n      <QCard>\n        <QCardSection>{lorem1}</QCardSection>\n        <QSeparator inset />\n        <QCardSection>{lorem1}</QCardSection>\n      </QCard>\n    </>\n  )\n}\n","file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QCard/QCard.docs.tsx"},"QCardActionsStory":{"id":"QCardActionsStory","source":"function QCardActionsStory() {\n  return (\n    <QCard>\n      <QCardSection>\n        <h6>Title Example</h6>\n      </QCardSection>\n      <QSeparator />\n      <QCardSection>\n        {lorem1}\n      </QCardSection>\n      <QCardActions>\n        <QButton>Button Example</QButton>\n      </QCardActions>\n    </QCard>\n  )\n}\n","file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QCard/QCard.docs.tsx"},"QChartCombinationStory":{"id":"QChartCombinationStory","source":"import dataCombination from './demo.custom.invert'\n\nfunction QChartCombinationStory() {\n  return <QChart definition={dataCombination} />\n}\n","file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QChart/QChart.docs.tsx"},"QChartLinesStory":{"id":"QChartLinesStory","source":"const dataLines = {\n  title: {\n    text: 'U.S Solar Employment Growth by Job Category, 2010-2020',\n    align: 'left',\n  },\n  subtitle: {\n    text: 'Source: <a href=\"https://irecusa.org/programs/solar-jobs-census/\" target=\"_blank\">IREC</a>',\n    align: 'left',\n  },\n  yAxis: {\n    title: {\n      text: 'Number of Employees',\n    },\n  },\n  xAxis: {},\n  legend: {\n    layout: 'vertical',\n    align: 'right',\n    verticalAlign: 'middle',\n  },\n  plotOptions: {\n    series: {\n      pointStart: 2010,\n    },\n  },\n  series: [\n    {\n      name: 'Installation & Developers',\n      data: [43934, 48656, 65165, 81827, 112143, 142383, 171533, 165174, 155157, 161454, 154610],\n    },\n    {\n      name: 'Manufacturing',\n      data: [24916, 37941, 29742, 29851, 32490, 30282, 38121, 36885, 33726, 34243, 31050],\n    },\n    {\n      name: 'Sales & Distribution',\n      data: [11744, 30000, 16005, 19771, 20185, 24377, 32147, 30912, 29243, 29213, 25663],\n    },\n    {\n      name: 'Operations & Maintenance',\n      data: [null, null, null, null, null, null, null, null, 11164, 11218, 10077],\n    },\n    {\n      name: 'Other',\n      data: [21908, 5548, 8105, 11248, 8989, 11816, 18274, 17300, 11164, null, null],\n    },\n  ],\n  responsive: {\n    rules: [\n      {\n        condition: {\n          maxWidth: 500,\n        },\n        chartOptions: {\n          legend: {\n            layout: 'horizontal',\n            align: 'center',\n            verticalAlign: 'bottom',\n          },\n        },\n      },\n    ],\n  },\n}\n\nfunction QChartLinesStory() {\n  return <QChart definition={dataLines} />\n}\n","file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QChart/QChart.docs.tsx"},"QCheckboxCustomIconsStory":{"id":"QCheckboxCustomIconsStory","source":"import { BsFillBagCheckFill, BsFillBagDashFill, BsFillBagFill } from 'react-icons/all'\n\nfunction QCheckboxCustomIconsStory() {\n  return (\n    <div>\n      <QCheckbox\n        checkedIcon={BsFillBagCheckFill}\n        uncheckedIcon={BsFillBagFill}\n        undeterminedIcon={BsFillBagDashFill}\n        label=\"Bag status\"\n      />\n    </div>\n  )\n}\n","file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QCheckbox/QCheckbox.docs.tsx"},"QCheckboxBasicStory":{"id":"QCheckboxBasicStory","source":"function QCheckboxBasicStory() {\n  return (\n    <div>\n      <QCheckbox />\n    </div>\n  )\n}\n","file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QCheckbox/QCheckbox.docs.tsx"},"QDrawerBasicStory":{"id":"QDrawerBasicStory","source":"import { CbArrowLeft, CbArrowRight, CbMenu } from '@quarbon/icons/cb'\n\nfunction QDrawerBasicStory() {\n  const [openLeft, setOpenLeft] = useState(true)\n  const [openRight, setOpenRight] = useState(true)\n  const [mini, setMini] = useState(false)\n\n  function onClickLeftButton() {\n    setOpenLeft(!openLeft)\n  }\n\n  function onClickRightButton() {\n    setOpenRight(!openRight)\n  }\n\n  function onCLickMiniMode() {\n    setMini(!mini)\n  }\n\n  return (\n    <div style={{ height: 400, width: '100%', overflow: 'hidden' }} className=\"vbox\">\n      <QToolbar dark>\n        <QButton flat icon={<CbMenu />} onClick={onClickLeftButton} />\n        <QToolbarTitle>\n          <span>\n            IBM <strong>[Platform]</strong>\n          </span>\n        </QToolbarTitle>\n        <QButton flat icon={<CbMenu />} onClick={onClickRightButton} />\n      </QToolbar>\n\n      <div className=\"client hbox\">\n        <QDrawer\n          open={openLeft}\n          mini={mini}\n          overlay\n          onClose={() => {\n            setOpenLeft(false)\n          }}\n        >\n          <QButton\n            icon={mini ? <CbArrowRight /> : <CbArrowLeft />}\n            flat\n            onClick={onCLickMiniMode}\n            style={{\n              position: 'absolute',\n              right: 4,\n              bottom: 4,\n            }}\n          />\n          {mini ? null : <div className=\"text-caption\">Right Panel</div>}\n        </QDrawer>\n        <div className=\"client row align-center justify-center\">\n          <h6>Content area</h6>\n        </div>\n        <QDrawer open={openRight} slide=\"right\">\n          <div className=\"text-caption\">Right Panel</div>\n        </QDrawer>\n      </div>\n    </div>\n  )\n}\n","file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QDrawer/QDrawer.docs.tsx"},"QFormInlineRulesStory":{"id":"QFormInlineRulesStory","source":"import { useFormData } from '@quarbon/hooks'\nimport { rules } from '@quarbon/ui/QForm/QFormRules'\n\nfunction QFormInlineRulesStory() {\n  const form = useFormData({\n    name: 'val',\n    email: '',\n  })\n\n  return (\n    <QForm formData={form}>\n      <div className=\"text-caption\">name={form.name}</div>\n      <br />\n      <QTextbox name=\"name\" value={form.name} rules={rules().max(3)} helperText=\"Max 3 characters\" />\n      <br />\n      <QTextbox name=\"email\" value={form.email} rules={rules().email()} helperText=\"Max 3 characters\" />\n    </QForm>\n  )\n}\n","file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QForm/QForm.docs.tsx"},"QFormUseFormDataRulesStory":{"id":"QFormUseFormDataRulesStory","source":"import { useFormData } from '@quarbon/hooks'\nimport { rules } from '@quarbon/ui/QForm/QFormRules'\n\nfunction QFormUseFormDataRulesStory() {\n  const form = useFormData({\n    name: rules().max(3),\n    email: rules().email(),\n  })\n\n  return (\n    <QForm formData={form}>\n      <div className=\"text-caption\">name={form.name}</div>\n      <div className=\"text-caption\">email={form.email}</div>\n      <br />\n      <QTextbox name=\"name\" value={form.name} helperText=\"Max 3 characters\" />\n      <br />\n      <QTextbox name=\"email\" value={form.email} helperText=\"Seu email\" />\n    </QForm>\n  )\n}\n","file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QForm/QForm.docs.tsx"},"QFormWithNativeInputStory":{"id":"QFormWithNativeInputStory","source":"import { useFormData } from '@quarbon/hooks'\nimport { rules } from '@quarbon/ui/QForm/QFormRules'\n\nfunction QFormWithNativeInputStory() {\n  const form = useFormData({\n    name: rules().max(3),\n  })\n\n  return (\n    <QForm>\n      <div className=\"text-caption\">name={form.name}</div>\n      <br />\n      <input\n        type=\"text\"\n        value={form.name || ''}\n        className=\"native-input\"\n        onChange={(evt) => form.setValue('name', evt.target.value)}\n      />\n      <div className=\"text-overline text-negative\">{form.getError('name')}</div>\n    </QForm>\n  )\n}\n","file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QForm/QForm.docs.tsx"},"QFormCustomValidatorStory":{"id":"QFormCustomValidatorStory","source":"import { useFormData } from '@quarbon/hooks'\nimport { rules } from '@quarbon/ui/QForm/QFormRules'\n\nfunction QFormCustomValidatorStory() {\n  const form = useFormData({\n    myValue: rules().required().custom(myCustomValidation),\n  })\n\n  function myCustomValidation(value: number) {\n    if (!value) return true\n\n    return value > 10 && value < 20 ? true : 'Please, enter a value between 10 and 20!'\n  }\n\n  return (\n    <QForm formData={form}>\n      <div className=\"text-caption\">value={form.myValue}</div>\n      <br />\n      <QTextbox\n        type=\"number\"\n        name=\"myValue\"\n        value={form.myValue}\n        helperText={form.isValidate('myValue') ? 'The value is correct' : 'A value between 10 and 20'}\n      />\n    </QForm>\n  )\n}\n","file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QForm/QForm.docs.tsx"},"QFormSubmitValidationStory":{"id":"QFormSubmitValidationStory","source":"import { Dialog } from '@quarbon/plugins/Dialog'\n\nfunction QFormSubmitValidationStory() {\n  const form = useFormData({\n    email: rules().required().email().value('test'),\n    accept: false,\n  })\n\n  function onSubmit(data: any) {\n    if (!data.accept) {\n      Dialog.notifyError('You need to accept the license and terms first')\n    } else {\n      Dialog.notifySuccess('Submitted')\n    }\n  }\n\n  return (\n    <QForm formData={form} onSubmit={onSubmit}>\n      <QTextbox label=\"Your email*\" name=\"email\" value={form.email} />\n      <br />\n      <QCheckbox label=\"I accept the license and terms\" name=\"accept\" checked={form.accept} />\n      <div style={{ marginTop: 20 }}>\n        <QButton label=\"Submit\" type=\"submit\" color=\"primary\" />\n        <QButton label=\"Reset\" type=\"reset\" color=\"secondary\" style={{ marginLeft: 20 }} />\n      </div>\n    </QForm>\n  )\n}\n","file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QForm/QForm.docs.tsx"},"QListBasicStory":{"id":"QListBasicStory","source":"function QListBasicStory() {\n  return (\n    <QList bordered separator style={{width:\"100%\"}}>\n      <QListItem clickable>\n        <QListSection>Single line item</QListSection>\n      </QListItem>\n      <QListItem clickable>\n        <QListSection>\n          <QListLabel>Item with caption</QListLabel>\n          <QListLabel caption>Caption</QListLabel>\n        </QListSection>\n      </QListItem>\n      <QListItem clickable>\n        <QListSection>\n          <QListLabel overline>OVERLINE</QListLabel>\n          <QListLabel caption>Item with overline</QListLabel>\n        </QListSection>\n      </QListItem>\n    </QList>\n  )\n}\n","file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QList/QList.docs.tsx"},"QListWithIconStory":{"id":"QListWithIconStory","source":"function QListWithIconStory() {\n  return (\n    <QList bordered separator>\n      <QListItem clickable className=\"text-primary\">\n        <QListSection avatar>\n          <CbAccount size={24} />\n        </QListSection>\n        <QListSection>Icon as avatar</QListSection>\n      </QListItem>\n      <QListItem clickable>\n        <QListSection avatar>\n          <CbAirplayFilled size={24} />\n        </QListSection>\n\n        <QListSection>\n          <QListLabel>Single line item</QListLabel>\n          <QListLabel caption lines=\"2\">\n            Secondary line text. {lorem1}\n          </QListLabel>\n        </QListSection>\n\n        <QListSection side top>\n          <QListLabel caption>5 min ago</QListLabel>\n          <CbStarFilled color=\"yellow\" />\n        </QListSection>\n      </QListItem>\n    </QList>\n  )\n}\n","file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QList/QList.docs.tsx"},"QListWithCheckboxStory":{"id":"QListWithCheckboxStory","source":"function QListWithCheckboxStory() {\n  const [notifications, setNotifications] = useState(false)\n  const [sound, setSound] = useState(false)\n\n  return (\n    <QList bordered separator>\n      <QListLabel header>General</QListLabel>\n      <QListItem clickable onClick={() => setNotifications(!notifications)}>\n        <QListSection avatar style={{ marginRight: 20 }}>\n          <QCheckbox checked={notifications} />\n        </QListSection>\n        <QListSection>\n          <QListLabel>Notifications</QListLabel>\n          <QListLabel caption lines=\"2\">\n            Notify me about updates to apps or games that I downloaded\n          </QListLabel>\n        </QListSection>\n      </QListItem>\n      <QListItem clickable onClick={() => setSound(!sound)}>\n        <QListSection avatar style={{ marginRight: 20 }}>\n          <QCheckbox checked={sound} />\n        </QListSection>\n        <QListSection>\n          <QListLabel>Sound</QListLabel>\n          <QListLabel caption lines=\"2\">\n            Auto-update apps at anytime. Data charges may apply\n          </QListLabel>\n        </QListSection>\n      </QListItem>\n    </QList>\n  )\n}\n","file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QList/QList.docs.tsx"},"QListItemWithMenuStory":{"id":"QListItemWithMenuStory","source":"function QListItemWithMenuStory() {\n  return (\n    <QList bordered separator>\n      <QListLabel header>General</QListLabel>\n      <QListItem clickable onClick={() => Dialog.notifyWarning('Item clicked')}>\n        <QListSection>\n          <QListLabel>Sound</QListLabel>\n          <QListLabel caption lines=\"2\">\n            Auto-update apps at anytime. Data charges may apply\n          </QListLabel>\n        </QListSection>\n        <QListSection side>\n          <QButton flat style={{ zIndex: 1 }}>\n            <CbOverflowMenuVertical />\n            <QMenu>\n              <QList>\n                <QListItem clickable>\n                  <QListSection>\n                    <QListLabel>Menu Item 01</QListLabel>\n                  </QListSection>\n                </QListItem>\n                <QListItem clickable>\n                  <QListSection>\n                    <QListLabel>Menu Item 02</QListLabel>\n                  </QListSection>\n                </QListItem>\n                <QListItem clickable>\n                  <QListSection>\n                    <QListLabel>Menu Item 03</QListLabel>\n                  </QListSection>\n                </QListItem>\n              </QList>\n            </QMenu>\n          </QButton>\n        </QListSection>\n      </QListItem>\n    </QList>\n  )\n}\n","file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QList/QList.docs.tsx"},"QListMenuExampleStory":{"id":"QListMenuExampleStory","source":"function QListMenuExampleStory() {\n  const [active, setActive] = useState(0)\n\n  return (\n    <QList bordered>\n      <QListItem clickable active={active == 0} onClick={() => setActive(0)}>\n        <QListSection avatar>\n          <CbMessageQueue size={24} />\n        </QListSection>\n        <QListSection>\n          <QListLabel>Inbox</QListLabel>\n        </QListSection>\n      </QListItem>\n      <QListItem clickable active={active == 1} onClick={() => setActive(1)}>\n        <QListSection avatar>\n          <CbSendFilled size={24} />\n        </QListSection>\n        <QListSection>\n          <QListLabel>Outbox</QListLabel>\n        </QListSection>\n      </QListItem>\n      <QListItem clickable active={active == 2} onClick={() => setActive(2)}>\n        <QListSection avatar>\n          <CbTrashCan size={24} />\n        </QListSection>\n        <QListSection>\n          <QListLabel>Trash</QListLabel>\n        </QListSection>\n      </QListItem>\n      <QSeparator />\n      <QListItem clickable active={active == 3} onClick={() => setActive(3)}>\n        <QListSection avatar>\n          <CbSettings size={24} />\n        </QListSection>\n        <QListSection>\n          <QListLabel>Settings</QListLabel>\n        </QListSection>\n      </QListItem>\n    </QList>\n  )\n}\n","file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QList/QList.docs.tsx"},"QLoadingBasicStory":{"id":"QLoadingBasicStory","source":"function QLoadingBasicStory() {\n  return (\n    <>\n      <QLoading color=\"primary\" />\n      <QLoading color=\"accent\" />\n      <QLoading color=\"warning\" />\n      <QLoading color=\"info\" />\n      <QLoading color=\"positive\" />\n      <QLoading color=\"negative\" />\n    </>\n  )\n}\n","file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QLoading/QLoading.docs.tsx"},"QLoadingLabelPositionStory":{"id":"QLoadingLabelPositionStory","source":"function QLoadingLabelPositionStory() {\n  return (\n    <>\n      <QLoading color=\"primary\" label=\"Default\" />\n      <QLoading color=\"secondary\" label=\"Bottom position\" labelPosition=\"bottom\" />\n      <QLoading color=\"accent\" label=\"Top position\" labelPosition=\"top\" />\n      <QLoading color=\"warning\" label=\"Right position\" labelPosition=\"right\" />\n    </>\n  )\n}\n","file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QLoading/QLoading.docs.tsx"},"QLoadingSizeStory":{"id":"QLoadingSizeStory","source":"function QLoadingSizeStory() {\n  return (\n    <>\n      <QLoading color=\"primary\" size={42} labelPosition=\"top\" label=\"42\" />\n      <QLoading color=\"primary\" size={62} labelPosition=\"top\" label=\"62\" />\n      <QLoading color=\"primary\" size={92} labelPosition=\"top\" label=\"92\" />\n      <QLoading color=\"primary\" size={120} labelPosition=\"top\" label=\"120\" />\n    </>\n  )\n}\n","file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QLoading/QLoading.docs.tsx"},"QMenuContextStory":{"id":"QMenuContextStory","source":"function QMenuContextStory() {\n  return (\n    <div\n      className=\"bg-secondary text-secondary-invert\"\n      data-open-modal={true}\n      style={{ padding: 20, cursor: 'default' }}\n    >\n      Click me! Using contextPosition\n      <QMenu contextPosition>\n        <QList>\n          <QListItem clickable data-close-modal>\n            Close\n          </QListItem>\n          <QListItem clickable>Close All Tabs</QListItem>\n          <QListItem clickable>Copy Path/Reference</QListItem>\n          <QSeparator />\n          <QListItem clickable>Pin Tab</QListItem>\n          <QListItem clickable>Override File</QListItem>\n        </QList>\n      </QMenu>\n    </div>\n  )\n}\n","file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QMenu/QMenu.docs.tsx"},"QMenuBasicStory":{"id":"QMenuBasicStory","source":"function QMenuBasicStory() {\n  return (\n    <>\n      <QButton color=\"primary\">\n        Basic menu\n        <QMenu>\n          <QList>\n            <QListItem clickable data-close-modal>\n              Close\n            </QListItem>\n            <QListItem clickable>Go To</QListItem>\n            <QListItem clickable>Copy Path/Reference</QListItem>\n            <QSeparator />\n            <QListItem clickable>Pin Tab</QListItem>\n            <QListItem clickable>Override File</QListItem>\n          </QList>\n        </QMenu>\n      </QButton>\n      <QButton color=\"positive\" style={{ marginLeft: 20 }}>\n        Persistent menu\n        <QMenu persistent>\n          <QList>\n            <QListItem className=\"bg-secondary text-secondary-invert\" clickable data-close-modal>\n              Close\n            </QListItem>\n            <QSeparator />\n            <QListItem clickable>Paste</QListItem>\n            <QListItem clickable>Copy Path/Reference</QListItem>\n            <QListItem clickable>Pin Tab</QListItem>\n            <QListItem clickable>Override File</QListItem>\n          </QList>\n        </QMenu>\n      </QButton>\n    </>\n  )\n}\n","file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QMenu/QMenu.docs.tsx"},"QMenuByPositionStory":{"id":"QMenuByPositionStory","source":"function QMenuByPositionStory() {\n  return (\n    <div\n      className=\"bg-accent text-accent-invert\"\n      data-open-modal={true}\n      style={{ padding: 20, margin: '0 10px', cursor: 'default' }}\n    >\n      Click me! Using touchPosition\n      <QMenu touchPosition>\n        <QList>\n          <QListItem clickable data-close-modal>\n            Close\n          </QListItem>\n          <QListItem clickable>Close All Tabs</QListItem>\n          <QListItem clickable>Copy Path/Reference</QListItem>\n          <QSeparator />\n          <QListItem clickable>Pin Tab</QListItem>\n          <QListItem clickable>Override File</QListItem>\n        </QList>\n      </QMenu>\n    </div>\n  )\n}\n","file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QMenu/QMenu.docs.tsx"},"QMenuPositionStory":{"id":"QMenuPositionStory","source":"function QMenuPositionStory() {\n  const [anchor, setAnchor] = useState<TAnchor>('bottom left')\n  const [self, setSelf] = useState<TAnchor>('top left')\n  const positions: Array<TAnchor> = [\n    'top right',\n    'top left',\n    'top middle',\n    'bottom left',\n    'bottom right',\n    'bottom middle',\n    'center left',\n    'center right',\n    'center middle',\n  ]\n\n  return (\n    <div className=\"col\">\n      <p className=\"text-subtitle2 text-warning\">TODO: Bug using \"middle\" position</p>\n      <div className=\"row\" style={{ marginTop: 20 }}>\n        <QSelect label=\"Anchor position\" value={anchor} onChange={(item: TAnchor) => setAnchor(item)}>\n          {positions.map((p) => (\n            <QSelectItem key={p} value={p} label={p} />\n          ))}\n        </QSelect>\n        <QSelect\n          label=\"Self position\"\n          value={self}\n          onChange={(item: TAnchor) => setSelf(item)}\n          style={{ marginLeft: 20 }}\n        >\n          {positions.map((p) => (\n            <QSelectItem key={p} value={p} label={p} />\n          ))}\n        </QSelect>\n      </div>\n      <div className=\"row justify-center\">\n        <QButton color=\"primary\">\n          <span>Show menu</span>\n          <QMenu anchor={anchor} self={self}>\n            <QList>\n              <QListItem clickable data-close-modal>\n                Close\n              </QListItem>\n              <QListItem clickable>Close All Tabs</QListItem>\n              <QListItem clickable>Copy Path/Reference</QListItem>\n              <QSeparator />\n              <QListItem clickable>Pin Tab</QListItem>\n              <QListItem clickable>Override File</QListItem>\n            </QList>\n          </QMenu>\n        </QButton>\n      </div>\n    </div>\n  )\n}\n","file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QMenu/QMenu.docs.tsx"},"QMenuIdeaStory":{"id":"QMenuIdeaStory","source":"function QMenuIdeaStory() {\n  return (\n    <QButton>\n      Account settings\n      <QMenu className=\"docs-qmenu\">\n        <div className=\"row no-wrap idea\">\n          <div>\n            <h6 style={{ paddingBottom: 16 }}>Settings</h6>\n            <QField borderless>\n              <QCheckbox checked={false} label=\"Use mobile data\" />\n            </QField>\n            <QField borderless>\n              <QCheckbox checked={true} label=\"Bluetooth\" />\n            </QField>\n          </div>\n          <QSeparator style={{ margin: '0 20px' }} />\n          <div className=\"col\">\n            <img className=\"avatar\" src=\"https://cdn.quasar.dev/img/avatar4.jpg\" alt=\"Avatar\" />\n            <span className=\"text-subtitle1\" style={{ marginTop: 16 }}>\n              I Am Groot\n            </span>\n          </div>\n        </div>\n      </QMenu>\n    </QButton>\n  )\n}\n","file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QMenu/QMenu.docs.tsx"},"QMenuShowPropertyStory":{"id":"QMenuShowPropertyStory","source":"function QMenuShowPropertyStory() {\n  const [show, setShow] = useState(false)\n\n  return (\n    <>\n      <QButton color=\"primary\" label={show ? 'Hide' : 'Show'} onClick={() => setShow(!show)} />\n\n      <div>\n        <QMenu show={show} persistent>\n          <QList>\n            <QListItem clickable data-close-modal>\n              Close\n            </QListItem>\n            <QListItem clickable>Close All Tabs</QListItem>\n            <QListItem clickable>Copy Path/Reference</QListItem>\n            <QSeparator />\n            <QListItem clickable>Pin Tab</QListItem>\n            <QListItem clickable>Override File</QListItem>\n          </QList>\n        </QMenu>\n      </div>\n    </>\n  )\n}\n","file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QMenu/QMenu.docs.tsx"},"QMenuFitToHeightStory":{"id":"QMenuFitToHeightStory","source":"function QMenuFitToHeightStory() {\n  const [show, setShow] = useState(false)\n\n  return (\n    <>\n      <QButton color=\"primary\" label=\"fit to height\" onClick={() => setShow(!show)} />\n      <QMenu\n        anchor=\"top right\"\n        anchorRef={document.body}\n        fitToHeight\n        onClose={() => setShow(false)}\n        self=\"top right\"\n        show={show}\n        transition=\"slide_right\"\n      >\n        <QList>\n          <QListItem clickable data-close-modal>\n            Close\n          </QListItem>\n          <QListItem clickable>Go To</QListItem>\n          <QListItem clickable>Copy Path/Reference</QListItem>\n          <QSeparator />\n          <QListItem clickable>Pin Tab</QListItem>\n          <QListItem clickable>Override File</QListItem>\n        </QList>\n      </QMenu>\n    </>\n  )\n}\n","file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QMenu/QMenu.docs.tsx"},"QProgressBasicStory":{"id":"QProgressBasicStory","source":"<QProgress value={50} indeterminate style={{ width: '100%' }} />","file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QProgress/QProgress.docs.tsx"},"QRadioButtonCustomIconsStory":{"id":"QRadioButtonCustomIconsStory","source":"import { CbCheckmarkFilled } from '@quarbon/icons/cb'\n\nfunction QRadioButtonCustomIconsStory() {\n  return (\n    <>\n      <QRadio checkedIcon={CbCheckmarkFilled} label=\"Line\" value=\"Line\" name=\"form\" />\n      <QRadio checkedIcon={CbCheckmarkFilled} label=\"Rectangle\" value=\"Rectangle\" name=\"form\" />\n      <QRadio checkedIcon={CbCheckmarkFilled} label=\"Ellipse\" value=\"Ellipse\" name=\"form\" />\n    </>\n  )\n}\n","file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QRadio/QRadio.docs.tsx"},"QRadioButtonBasicStory":{"id":"QRadioButtonBasicStory","source":"function QRadioButtonBasicStory() {\n  return (\n    <>\n      <QRadio value=\"1\" name=\"agree\" />\n      <QRadio value=\"2\" name=\"agree\" />\n      <QRadio value=\"3\" name=\"agree\" />\n    </>\n  )\n}\n","file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QRadio/QRadio.docs.tsx"},"Vertical":{"id":"Vertical","source":"function Vertical() {\n  const [size1, setSize1] = useState(0)\n  const [size2, setSize2] = useState(0)\n\n  return (\n    <div className=\"col\">\n      <div className=\"row\">\n        <div className=\"q-card q-card--bordered q-card__section\" style={{ maxWidth: 160 }}>\n          Size {size1 ? `(${size1})` : ''}\n        </div>\n        <QResizer min={110} onDrag={(width: number) => setSize1(width)} />\n        <div className=\"q-card q-card--bordered q-card__section\">block</div>\n      </div>\n\n      <div className=\"row\">\n        <div className=\"q-card q-card--bordered q-card__section\">block</div>\n        <QResizer max={500} min={110} target=\"after\" onDrag={(width: number) => setSize2(width)} />\n        <div className=\"q-card q-card--bordered q-card__section\" style={{ maxWidth: 160 }}>\n          Size {size2 ? `(${size2})` : ''}\n        </div>\n      </div>\n    </div>\n  )\n}\n","file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QResizer/QResizer.docs.tsx"},"Horizontal":{"id":"Horizontal","source":"function Horizontal() {\n  const [size1, setSize1] = useState(0)\n  const [size2, setSize2] = useState(0)\n\n  return (\n    <div className=\"col\">\n      <div className=\"col\">\n        <div className=\"q-card q-card--bordered q-card__section\" style={{ marginBottom: 0 }}>\n          Size {size1 ? `(${size1})` : ''}\n        </div>\n        <QResizer min={45} orientation=\"horizontal\" onDrag={(width: number) => setSize1(width)} />\n        <div className=\"q-card q-card--bordered q-card__section\">block</div>\n      </div>\n\n      <div className=\"col\">\n        <div className=\"q-card q-card--bordered q-card__section\" style={{ marginBottom: 0 }}>\n          block\n        </div>\n        <QResizer min={45} orientation=\"horizontal\" target=\"after\" onDrag={(width: number) => setSize2(width)} />\n        <div className=\"q-card q-card--bordered q-card__section\">Size {size2 ? `(${size2})` : ''}</div>\n      </div>\n    </div>\n  )\n}\n","file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QResizer/QResizer.docs.tsx"},"QSelectBasicStory":{"id":"QSelectBasicStory","source":"const options = [\n  { label: 'option 001', value: '1' },\n  { label: 'option 002', value: '2' },\n  { label: 'option 003', value: '3' },\n  { label: 'option 004', value: '4' },\n]\n\nfunction QSelectBasicStory() {\n  return <QSelect options={options} />\n}\n","file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QSelect/QSelect.docs.tsx"},"SkeletonElementsStory":{"id":"SkeletonElementsStory","source":"function SkeletonElementsStory() {\n  const [skeleton, setSkeleton] = useState(true)\n\n  return (\n    <div>\n      <QCheckbox label=\"Active\" checked={skeleton} onChange={() => setSkeleton(!skeleton)} />\n      <div className=\"row q-gap-16\">\n        <QField outlined label=\"Button\">\n          <QButton label=\"Skeleton\" skeleton={skeleton} />\n        </QField>\n        <QField outlined label=\"Checkbox\">\n          <QCheckbox skeleton={skeleton} label=\"Skeleton\" />\n        </QField>\n        <QField outlined label=\"Radio\">\n          <QRadio name=\"option1\" value=\"1\" skeleton={skeleton} label=\"Skeleton\" />\n        </QField>\n        <QField outlined label=\"Select\">\n          <QSelect\n            skeleton={skeleton}\n            options={[\n              { id: 1, label: 'Option 01' },\n              { id: 2, label: 'Option 02' },\n              { id: 3, label: 'Option 03' },\n            ]}\n          />\n        </QField>\n      </div>\n    </div>\n  )\n}\n","file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QSkeleton/QSkeleton.docs.tsx"},"SkeletonCardStory":{"id":"SkeletonCardStory","source":"function SkeletonCardStory() {\n  return (\n    <div className=\"q-gap-16\">\n      <QCard skeleton>\n        <QCardSection>Card Section</QCardSection>\n        <QCardSection>{lorem1}</QCardSection>\n        <QCardActions>\n          <QButton label=\"Action 1\" color=\"secondary\" />\n          <QButton label=\"Action 2\" />\n        </QCardActions>\n      </QCard>\n      <QCard>\n        <QCardSection skeleton>Card Section</QCardSection>\n        <QCardSection>{lorem1}</QCardSection>\n        <QCardActions>\n          <QButton label=\"Action 1\" color=\"secondary\" />\n          <QButton label=\"Action 2\" />\n        </QCardActions>\n      </QCard>\n      <QCard>\n        <QCardSection>Card Section</QCardSection>\n        <QCardSection skeleton>{lorem1}</QCardSection>\n        <QCardActions>\n          <QButton label=\"Action 1\" color=\"secondary\" />\n          <QButton label=\"Action 2\" />\n        </QCardActions>\n      </QCard>\n    </div>\n  )\n}\n","file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QSkeleton/QSkeleton.docs.tsx"},"SkeletonListStory":{"id":"SkeletonListStory","source":"function SkeletonListStory() {\n  const arr = [1, 2, 3, 4]\n\n  return (\n    <QList>\n      {arr.map((i) => (\n        <QListItem key={i}>\n          <QListSection avatar>\n            <div className=\"q-avatar q-skeleton\"></div>\n          </QListSection>\n\n          <QListSection>\n            <QListLabel skeleton>Single line item</QListLabel>\n            <QListLabel skeleton caption>\n              Secondary line text. Lorem ipsum dolor sit amet\n            </QListLabel>\n          </QListSection>\n        </QListItem>\n      ))}\n    </QList>\n  )\n}\n","file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QSkeleton/QSkeleton.docs.tsx"},"SkeletonTableStory":{"id":"SkeletonTableStory","source":"function SkeletonTableStory() {\n  const columns: Array<TTableCol> = [{ field: 'name' }, { field: 'protocol' }, { field: 'port' }]\n  const rows: Array<Record<string, any>> = [\n    {\n      name: 'Load Balancer 11',\n      protocol: 'HTTP',\n      port: '80',\n    },\n    {\n      name: 'Load Balancer 4',\n      protocol: 'HTTP',\n      port: '81',\n    },\n    {\n      name: 'Load Balancer 10',\n      protocol: 'HTTPS',\n      port: '443',\n    },\n  ]\n\n  return <QTable skeleton clickable columns={columns} rows={rows} />\n}\n","file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QSkeleton/QSkeleton.docs.tsx"},"QSliderBasicStory":{"id":"QSliderBasicStory","source":"function QSliderBasicStory() {\n  return <QSlider label=\"Range 500-1000\" max={1000} min={500} />\n}\n","file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QSlider/QSlider.docs.tsx"},"QTableBasicStory":{"id":"QTableBasicStory","source":"import { QTable, TTableCol } from '@quarbon/ui'\n\nfunction QTableBasicStory() {\n  const columns: TTableCol[] = [{ field: 'name' }, { field: 'protocol' }, { field: 'port' }]\n  const rows: Record<string, any>[] = [\n    {\n      name: 'Load Balancer 11',\n      protocol: 'HTTP',\n      port: '80',\n    },\n    {\n      name: 'Load Balancer 4',\n      protocol: 'HTTP',\n      port: '81',\n    },\n  ]\n\n  return (\n    <QTable\n      clickable\n      title=\"Table title\"\n      helperText=\"This is some helpful text\"\n      columns={columns}\n      rows={rows}\n      toolbar=\"TOOLBAR\"\n      footer=\"FOOTER\"\n    />\n  )\n}\n","file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QTable/QTable.docs.tsx"},"QTabsWithIconStory":{"id":"QTabsWithIconStory","source":"import { CbAlarm, CbMailAll, CbOverflowMenuVertical, CbVideo } from '@quarbon/icons/cb'\n\nfunction QTabsWithIconStory() {\n  return (\n    <QTabs active=\"tab1\">\n      <QTab name=\"tab1\" label=\"Mails\" icon={<CbMailAll />} />\n      <QTab name=\"tab2\" label=\"Alarms\" icon={<CbAlarm />} />\n      <QTab name=\"tab3\" label=\"Movies\" icon={<CbVideo />} />\n    </QTabs>\n  )\n}\n","file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QTabs/QTabs.docs.tsx"},"QTabsCustomContentStory":{"id":"QTabsCustomContentStory","source":"import { CbAlarm, CbMailAll, CbOverflowMenuVertical, CbVideo } from '@quarbon/icons/cb'\n\nfunction QTabsCustomContentStory() {\n  return (\n    <QTabs active=\"tab1\">\n      <QTab name=\"tab1\">\n        Menu\n        <QButton flat icon={<CbOverflowMenuVertical />} style={{ marginLeft: 20 }} />\n      </QTab>\n      <QTab name=\"tab2\">\n        Checkbox\n        <QCheckbox checked={false} style={{ marginLeft: 20 }} />\n      </QTab>\n      <QTab name=\"tab3\">\n        <QProgress label=\"Progress\" indeterminate style={{ width: 100 }} />\n      </QTab>\n    </QTabs>\n  )\n}\n","file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QTabs/QTabs.docs.tsx"},"QTabsBasicStory":{"id":"QTabsBasicStory","source":"function QTabsBasicStory() {\n  return (\n    <QTabs active=\"tab1\">\n      <QTab name=\"tab1\" label=\"Mails\" />\n      <QTab name=\"tab2\" label=\"Alarms\" />\n      <QTab name=\"tab3\" label=\"Movies\" />\n    </QTabs>\n  )\n}\n","file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QTabs/QTabs.docs.tsx"},"QTabsBottomStory":{"id":"QTabsBottomStory","source":"function QTabsBottomStory() {\n  return (\n    <QTabs active=\"tab1\" indicator=\"bottom\" fill={false}>\n      <QTab name=\"tab1\" label=\"Mails\" />\n      <QTab name=\"tab2\" label=\"Alarms\" />\n      <QTab name=\"tab3\" label=\"Movies\" />\n    </QTabs>\n  )\n}\n","file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QTabs/QTabs.docs.tsx"},"QTabsWithPanelStory":{"id":"QTabsWithPanelStory","source":"function QTabsWithPanelStory() {\n  const [active, setActive] = useState('tab1')\n  return (\n    <div className=\"col\">\n      <QTabs\n        active={active}\n        onChange={(name: string) => {\n          setActive(name)\n        }}\n      >\n        <QTab name=\"tab1\" label=\"Mails\" />\n        <QTab name=\"tab2\" label=\"Alarms\" />\n        <QTab name=\"tab3\" label=\"Movies\" />\n      </QTabs>\n      {active == 'tab1' && (\n        <QCard bordered={false}>\n          <QCardSection>Mails contents</QCardSection>\n        </QCard>\n      )}\n      {active == 'tab2' && (\n        <QCard bordered={false}>\n          <QCardSection>Alarms contents</QCardSection>\n        </QCard>\n      )}\n      {active == 'tab3' && (\n        <QCard bordered={false}>\n          <QCardSection>Movies contents</QCardSection>\n        </QCard>\n      )}\n    </div>\n  )\n}\n","file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QTabs/QTabs.docs.tsx"},"QTextboxBasicStory":{"id":"QTextboxBasicStory","source":"function QTextboxBasicStory() {\n  return (\n    <>\n      <div className=\"q-gap-16\">\n        <QTextbox name=\"textbox\" label=\"Standard\" />\n        <QTextbox name=\"textbox\" label=\"Filled\" filled />\n        <QTextbox name=\"textbox\" label=\"Outlined\" outlined />\n      </div>\n    </>\n  )\n}\n","file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QTextbox/QTextbox.docs.tsx"},"QTextboxWithIconsStory":{"id":"QTextboxWithIconsStory","source":"function QTextboxWithIconsStory() {\n  return (\n    <>\n      <div className=\"q-gap-16\">\n        <QTextbox\n          name=\"textbox\"\n          outlined\n          label=\"Before icons\"\n          placeholder=\"Your text here\"\n          before={<CbCalendar size={32} />}\n        />\n        <QTextbox\n          name=\"textbox\"\n          outlined\n          label=\"Prepend icons\"\n          placeholder=\"Your text here\"\n          prepend={<CbCalendar size={32} />}\n        />\n        <QTextbox\n          name=\"textbox\"\n          outlined\n          label=\"After icon\"\n          placeholder=\"Your text here\"\n          after={<CbSend size={32} />}\n        />\n        <QTextbox\n          name=\"textbox\"\n          outlined\n          label=\"Append icon\"\n          placeholder=\"Your text here\"\n          append={<CbSend size={32} />}\n        />\n      </div>\n    </>\n  )\n}\n","file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QTextbox/QTextbox.docs.tsx"},"QTextboxInputTypesStory":{"id":"QTextboxInputTypesStory","source":"function QTextboxInputTypesStory() {\n  return (\n    <>\n      <div className=\"q-gap-16\">\n        <QTextbox name=\"textbox\" label=\"Type number\" type=\"number\" />\n        <QTextbox name=\"textbox\" label=\"Type date\" type=\"date\" />\n        <QTextbox name=\"textbox\" label=\"Type password\" type=\"password\" />\n        <QTextbox name=\"textbox\" style={{ height: 112 }} label=\"Type textarea\" type=\"textarea\" />\n      </div>\n    </>\n  )\n}\n","file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QTextbox/QTextbox.docs.tsx"},"QTextboxPrefixSuffixStory":{"id":"QTextboxPrefixSuffixStory","source":"function QTextboxPrefixSuffixStory() {\n  return (\n    <>\n      <div className=\"q-gap-16\">\n        <QTextbox name=\"textbox\" label=\"With prefix\" type=\"number\" prefix=\"$\" />\n        <QTextbox name=\"textbox\" label=\"With suffix\" suffix=\"@example.com\" />\n      </div>\n    </>\n  )\n}\n","file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QTextbox/QTextbox.docs.tsx"},"QToggleBasicStory":{"id":"QToggleBasicStory","source":"function QToggleBasicStory() {\n  const [checked, setChecked] = useState(false)\n\n  return (\n    <QField label=\"Toggle\" borderless after={checked ? '1' : '0'}>\n      <QToggle checked={checked} onChange={(value: boolean) => setChecked(value)} />\n    </QField>\n  )\n}\n","file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QToggle/QToggle.docs.tsx"},"QToolbarBasicStory":{"id":"QToolbarBasicStory","source":"import { CbLogin, CbMenu, CbNotification, CbOverflowMenuVertical, CbSwitcher, CbUserAvatar } from '@quarbon/icons/cb'\n\nfunction QToolbarBasicStory() {\n  return (\n    <div className=\"docs-qtoolbar__container\">\n      <QToolbar dark>\n        <QButton flat icon={<CbMenu />} />\n        <QToolbarTitle>\n          <span>\n            IBM <strong>[Platform]</strong>\n          </span>\n        </QToolbarTitle>\n        <QButton flat icon={<CbOverflowMenuVertical />} />\n      </QToolbar>\n      <QToolbar>\n        <QButton flat icon={<CbMenu />} />\n        <QToolbarTitle>\n          <span>\n            IBM <strong>[Platform]</strong>\n          </span>\n        </QToolbarTitle>\n        <QButton flat icon={<CbOverflowMenuVertical />} />\n      </QToolbar>\n    </div>\n  )\n}\n","file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QToolbar/QToolbar.docs.tsx"},"QToolbarGroupedStory":{"id":"QToolbarGroupedStory","source":"import { CbLogin, CbMenu, CbNotification, CbOverflowMenuVertical, CbSwitcher, CbUserAvatar } from '@quarbon/icons/cb'\n\nfunction QToolbarGroupedStory() {\n  return (\n    <>\n      <QToolbar dark>\n        <QButton flat icon={<CbMenu />} />\n        <QToolbarTitle>\n          <span>\n            IBM <strong>[Platform]</strong>\n          </span>\n        </QToolbarTitle>\n        <QButton flat icon={<CbOverflowMenuVertical />} />\n      </QToolbar>\n      <QToolbar dark inset>\n        <QToolbarTitle>\n          <span>\n            <strong>Quarbon</strong> UI Toolbar\n          </span>\n        </QToolbarTitle>\n      </QToolbar>\n    </>\n  )\n}\n","file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QToolbar/QToolbar.docs.tsx"},"QToolbarWithChildrenStory":{"id":"QToolbarWithChildrenStory","source":"import { CbLogin, CbMenu, CbNotification, CbOverflowMenuVertical, CbSwitcher, CbUserAvatar } from '@quarbon/icons/cb'\n\nfunction QToolbarWithChildrenStory() {\n  const [logged, setLogged] = useState(false)\n\n  return (\n    <div className=\"docs-qtoolbar__container\">\n      <QToolbar dark>\n        <QButton flat icon={<CbMenu />} />\n        <QSeparator />\n        <QToolbarTitle>Buttons</QToolbarTitle>\n        <QButton flat icon={<CbNotification />} />\n        <QSeparator />\n        <QButton\n          flat\n          icon={logged ? <CbUserAvatar /> : <CbLogin />}\n          onClick={() => {\n            setLogged(!logged)\n          }}\n        />\n        <QSeparator />\n        <QButton flat icon={<CbSwitcher />} />\n      </QToolbar>\n    </div>\n  )\n}\n","file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QToolbar/QToolbar.docs.tsx"},"QTreeAccordionModeStory":{"id":"QTreeAccordionModeStory","source":"const nodes: TNode[] = [\n  {\n    id: '1',\n    label: 'LO Menu 1',\n  },\n  {\n    id: '2',\n    label: 'LO Menu 2',\n    children: [\n      { id: '1.1', label: 'LO Menu tem 01' },\n      { id: '1.2', label: 'LO Menu tem 02' },\n      {\n        id: '1.3',\n        label: 'LO Menu tem 03',\n        children: [\n          { id: '1.3.1', label: 'LO SubMenu tem 01' },\n          { id: '1.3.2', label: 'LO SubMenu tem 02' },\n          { id: '1.3.3', label: 'LO SubMenu tem 03' },\n          { id: '1.3.4', label: 'LO SubMenu tem 04' },\n        ],\n      },\n      { id: '1.4', label: 'LO Menu tem 04' },\n    ],\n  },\n  {\n    id: '3',\n    label: 'LO Menu 3',\n  },\n]\n\nfunction QTreeAccordionModeStory() {\n  const [selected, setSelected] = useState('1.3.3')\n\n  function onChange(node: any) {\n    setSelected(node.id)\n  }\n\n  return (\n    <div className=\"row\">\n      <QTree accordion={true} nodes={nodes} selected={selected} onChange={onChange} />\n      <QResizer />\n      <h6>selected={selected}</h6>\n    </div>\n  )\n}\n","file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QTree/QTree.docs.tsx"},"QTreeTreeModeStory":{"id":"QTreeTreeModeStory","source":"const nodes: TNode[] = [\n  {\n    id: '1',\n    label: 'LO Menu 1',\n  },\n  {\n    id: '2',\n    label: 'LO Menu 2',\n    children: [\n      { id: '1.1', label: 'LO Menu tem 01' },\n      { id: '1.2', label: 'LO Menu tem 02' },\n      {\n        id: '1.3',\n        label: 'LO Menu tem 03',\n        children: [\n          { id: '1.3.1', label: 'LO SubMenu tem 01' },\n          { id: '1.3.2', label: 'LO SubMenu tem 02' },\n          { id: '1.3.3', label: 'LO SubMenu tem 03' },\n          { id: '1.3.4', label: 'LO SubMenu tem 04' },\n        ],\n      },\n      { id: '1.4', label: 'LO Menu tem 04' },\n    ],\n  },\n  {\n    id: '3',\n    label: 'LO Menu 3',\n  },\n]\n\nfunction QTreeTreeModeStory() {\n  const [selected, setSelected] = useState('1.3.3')\n\n  function onChange(node: any) {\n    setSelected(node.id)\n  }\n\n  return (\n    <div className=\"row\">\n      <QTree accordion={false} nodes={nodes} selected={selected} onChange={onChange} />\n      <QResizer />\n      <h6>selected={selected}</h6>\n    </div>\n  )\n}\n","file":"/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QTree/QTree.docs.tsx"}}

import "/home/fabio/Dev/quarbon/packages/quarbon/src/Icons.docs.tsx";
import "/home/fabio/Dev/quarbon/packages/quarbon/src/Introduction.docs.tsx";
import "/home/fabio/Dev/quarbon/packages/quarbon/src/plugins/Plugins.docs.tsx";
import "/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QAccordion/QAccordion.docs.tsx";
import "/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QBadge/QBadge.docs.tsx";
import "/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QButton/QButton.docs.tsx";
import "/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QButtonGroup/QButtonGroup.docs.tsx";
import "/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QCalendar/QCalendar.docs.tsx";
import "/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QCard/QCard.docs.tsx";
import "/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QChart/QChart.docs.tsx";
import "/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QCheckbox/QCheckbox.docs.tsx";
import "/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QDatePicker/QDatePicker.docs.tsx";
import "/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QDrawer/QDrawer.docs.tsx";
import "/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QForm/QForm.docs.tsx";
import "/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QInlineNotify/QInlineNotify.docs.tsx";
import "/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QList/QList.docs.tsx";
import "/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QLoading/QLoading.docs.tsx";
import "/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QMenu/QMenu.docs.tsx";
import "/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QProgress/QProgress.docs.tsx";
import "/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QRadio/QRadio.docs.tsx";
import "/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QResizer/QResizer.docs.tsx";
import "/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QSelect/QSelect.docs.tsx";
import "/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QSkeleton/QSkeleton.docs.tsx";
import "/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QSlider/QSlider.docs.tsx";
import "/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QTable/QTable.docs.tsx";
import "/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QTabs/QTabs.docs.tsx";
import "/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QTextbox/QTextbox.docs.tsx";
import "/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QToggle/QToggle.docs.tsx";
import "/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QToolbar/QToolbar.docs.tsx";
import "/home/fabio/Dev/quarbon/packages/quarbon/src/ui/QTree/QTree.docs.tsx";